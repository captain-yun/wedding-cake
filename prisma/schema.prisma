generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id           String        @id
  email        String        @unique
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  status       String        @default("active")
  last_login   DateTime?
  ideal_type   ideal_type?
  membership   membership?
  profile      profile?
  verification verification?
}

model profile {
  id                String   @id @default(cuid())
  user_id           String   @unique
  name              String
  gender            String
  birth_date        DateTime
  height            Int
  occupation        String
  company           String?
  education         String
  location          String
  photos            String[]
  about_me          String?
  profile_completed Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              users    @relation(fields: [user_id], references: [id])

  @@index([location])
  @@index([occupation])
}

model ideal_type {
  id               String   @id @default(cuid())
  user_id          String   @unique
  age_range        Json
  height_range     Json
  education        String[]
  locations        String[]
  occupations      String[]
  body_types       String[]
  smoking          Boolean?
  drinking         Boolean?
  religion         String?
  marriage_history String?
  children_plan    String?
  personalities    String[]
  lifestyle        String?
  hobbies          String[]
  date_style       String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  user             users    @relation(fields: [user_id], references: [id])
}

model membership {
  id              String            @id @default(cuid())
  user_id         String            @unique
  type            membership_type
  status          membership_status
  start_date      DateTime
  end_date        DateTime
  payment_history Json[]
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  user            users             @relation(fields: [user_id], references: [id])
}

model verification {
  id              String              @id @default(cuid())
  user_id         String              @unique
  type            verification_type
  email           String?
  business_number String?
  description     String?
  file_path       String?
  file_paths      String[]
  verification_code String? 
  expires_at       DateTime?
  attempts         Int       @default(0)
  status          verification_status @default(PENDING)
  created_at      DateTime            @default(now())
  updated_at      DateTime            @updatedAt
  user            users               @relation(fields: [user_id], references: [id])
}

enum membership_type {
  BASIC
  PREMIUM
  VIP
}

enum membership_status {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum verification_type {
  COMPANY_EMAIL
  COMPANY_CARD
  BUSINESS
  FREELANCER
  OTHER
}

enum verification_status {
  PENDING
  APPROVED
  REJECTED
}
