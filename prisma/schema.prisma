generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 앱 사용자 정보
model users {
  id            String     @id
  email         String     @unique
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  profile       profile?
  ideal_type    ideal_type?
  verification  verification?
  membership    membership?
  status        String     @default("active") // active, inactive, banned
  last_login    DateTime?

}

// 사용자 프로필
model profile {
  id                 String    @id @default(cuid())
  user_id            String    @unique
  user               users     @relation(fields: [user_id], references: [id])
  name               String
  gender             String
  birth_date         DateTime
  height             Int
  occupation         String
  company            String?
  education          String
  location           String
  photos             String[]  // URL 배열
  about_me           String?   @db.Text
  profile_completed  Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  @@index([location])
  @@index([occupation])
  
}

// 이상형 정보
model ideal_type {
  id             String    @id @default(cuid())
  user_id        String    @unique
  user           users     @relation(fields: [user_id], references: [id])
  age_range      Json      // { min: number, max: number }
  height_range   Json      // { min: number, max: number }
  education      String[]  // 배열로 변경
  locations      String[]  // 배열로 변경
  occupations    String[]  // 배열로 변경
  body_types     String[]  // 배열로 변경
  smoking        Boolean?
  drinking       Boolean?
  religion       String?
  marriage_history String?
  children_plan  String?
  personalities  String[]  // 배열로 변경
  lifestyle      String?
  hobbies        String[]  // 배열로 변경
  date_style     String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

}

// 멤버십 정보
model membership {
  id             String          @id @default(cuid())
  user_id        String          @unique
  user           users           @relation(fields: [user_id], references: [id])
  type           membership_type
  status         membership_status
  start_date     DateTime
  end_date       DateTime
  payment_history Json[]         // JSON 배열로 변경
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt

}

// 인증 정보
model verification {
  id                String             @id @default(cuid())
  user_id           String             @unique
  user              users              @relation(fields: [user_id], references: [id])
  type              verification_type
  email             String?     
  business_number   String?
  description       String?            @db.Text
  file_path         String?
  file_paths        String[]           // 배열로 변경
  status            verification_status @default(PENDING)
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt

}

// Enum 타입 정의
enum membership_type {
  BASIC
  PREMIUM
  VIP
}

enum membership_status {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum verification_type {
  COMPANY_EMAIL
  COMPANY_CARD
  BUSINESS
  FREELANCER
  OTHER
}

enum verification_status {
  PENDING
  APPROVED
  REJECTED
}
